!function(){"use strict";class t{constructor(){this.port=null,this.reader=null,this.writer=null,this.isConnected=!1,this.encoder=new TextEncoder,this.decoder=new TextDecoder,this.abortController=null,this.lineBuffer="",this.commandHistory=[],this.historyIndex=-1,this.currentInput="",this.initializeElements(),this.checkBrowserSupport(),this.setupEventListeners()}initializeElements(){this.connectButton=document.getElementById("connectButton"),this.clearButton=document.getElementById("clearButton"),this.sendButton=document.getElementById("sendButton"),this.serialInput=document.getElementById("serialInput"),this.output=document.getElementById("output"),this.console=document.getElementById("console"),this.baudSelect=document.getElementById("baudSelect"),this.baudRateDisplay=document.getElementById("baudRate"),this.connectionStatus=document.getElementById("connectionStatus"),this.connectionDot=document.getElementById("connectionDot"),this.browserDialog=document.getElementById("browserDialog"),this.permissionDialog=document.getElementById("permissionDialog"),this.exportButton=document.getElementById("exportButton"),this.updateBaudRateDisplay()}checkBrowserSupport(){return"serial"in navigator?(this.connectButton.removeAttribute("data-tooltip"),!0):(this.browserDialog.style.display="flex",this.connectButton.disabled=!0,this.connectButton.setAttribute("data-tooltip","web serial not supported in this browser"),!1)}setupEventListeners(){this.connectButton.addEventListener("click",()=>this.toggleConnection()),this.clearButton.addEventListener("click",()=>this.clearConsole()),this.sendButton.addEventListener("click",()=>this.sendData()),this.exportButton.addEventListener("click",()=>this.exportLog()),this.serialInput.addEventListener("keydown",t=>{"Enter"===t.key?this.sendData():"ArrowUp"===t.key?(t.preventDefault(),this.navigateHistory("up")):"ArrowDown"===t.key&&(t.preventDefault(),this.navigateHistory("down"))}),this.baudSelect.addEventListener("change",async()=>{this.updateBaudRateDisplay(),this.isConnected&&await this.reconnectWithNewBaudRate()})}updateBaudRateDisplay(){this.baudRateDisplay.textContent=`Baud Rate: ${this.baudSelect.value}`}async reconnectWithNewBaudRate(){try{this.port.getInfo();await this.disconnect(),await new Promise(t=>setTimeout(t,100)),await this.port.open({baudRate:parseInt(this.baudSelect.value),dataBits:8,stopBits:1,parity:"none",flowControl:"none"}),this.updateConnectionStatus(!0),this.startReading(),this.log("Reconnected with new baud rate: "+this.baudSelect.value+"\n")}catch(t){this.log(`Error changing baud rate: ${t.message}\n`),this.updateConnectionStatus(!1)}}async toggleConnection(){this.isConnected?await this.disconnect():await this.connect()}updateConnectionStatus(t){this.isConnected=t,this.connectionStatus.textContent=t?"Connected":"Disconnected",this.connectionDot.classList.toggle("connected",t),this.connectButton.textContent=t?"Disconnect":"Connect",this.sendButton.disabled=!t,this.serialInput.disabled=!t,this.baudSelect.disabled=t}async connect(){try{this.permissionDialog.style.display="flex",this.port=await navigator.serial.requestPort(),this.permissionDialog.style.display="none",await this.port.open({baudRate:parseInt(this.baudSelect.value),dataBits:8,stopBits:1,parity:"none",flowControl:"none"}),this.abortController=new AbortController,this.updateConnectionStatus(!0),this.startReading(),this.log("Connected to device\n")}catch(t){this.permissionDialog.style.display="none","NotFoundError"===t.name?this.log("No device selected\n"):this.log(`Error connecting: ${t.message}\n`),this.updateConnectionStatus(!1),await this.cleanup()}}async startReading(){if(this.port&&this.abortController)try{for(;this.port.readable&&!this.abortController.signal.aborted;){this.reader=this.port.readable.getReader();try{for(;;){const{value:t,done:e}=await this.reader.read();if(this.abortController.signal.aborted)break;if(e)break;this.log(this.decoder.decode(t))}}catch(t){this.abortController.signal.aborted||console.error("Error reading data:",t)}finally{try{await this.reader.releaseLock()}catch(t){console.warn("Error releasing reader lock:",t)}}}}catch(t){this.abortController.signal.aborted||console.error("Fatal read error:",t)}}async sendData(){if(!this.isConnected||!this.serialInput.value)return;const t=this.serialInput.value+"\n";try{this.writer=this.port.writable.getWriter(),await this.writer.write(this.encoder.encode(t)),this.log(`> ${t}`),this.serialInput.value.trim()&&(this.commandHistory.unshift(this.serialInput.value),this.commandHistory.length>50&&this.commandHistory.pop()),this.historyIndex=-1,this.currentInput="",this.serialInput.value=""}catch(t){console.error("Error writing to port:",t),this.log(`Error sending data: ${t.message}\n`)}finally{if(this.writer){try{await this.writer.releaseLock()}catch(t){console.warn("Error releasing writer lock:",t)}this.writer=null}}}async cleanup(){if(this.abortController&&(this.abortController.abort(),this.abortController=null),this.reader){try{await this.reader.cancel(),await this.reader.releaseLock()}catch(t){console.warn("Error cleaning up reader:",t)}this.reader=null}if(this.writer){try{await this.writer.releaseLock()}catch(t){console.warn("Error cleaning up writer:",t)}this.writer=null}if(this.port){try{await this.port.close()}catch(t){console.warn("Error closing port:",t)}this.port=null}this.isConnected=!1}async disconnect(){try{this.updateConnectionStatus(!1),await this.cleanup(),this.log("Disconnected from device\n")}catch(t){console.error("Error during disconnect:",t),this.log("Forced disconnect due to error\n")}}clearConsole(){this.output.textContent=""}log(t){const e=t.replace(/\r\n/g,"\n").replace(/\r/g,"\n");this.lineBuffer||(this.lineBuffer=""),this.lineBuffer+=e;const s=this.lineBuffer.split("\n");this.lineBuffer=s[s.length-1].endsWith("\n")?"":s.pop();const n=s.map(t=>{if(!t.trim())return"<br>";if(t.match(/^>\s*[a-z]+$/i))return`<span class="command-input">${t}</span><br>`;if(["WiFi scan started","Stopping Wi-Fi","WiFi started","Ready to scan","Please wait","WiFi monitor stopped","HTTP server started"].some(e=>t.includes(e)))return`<span class="status-message">${t}</span><br>`;if(t.match(/^Found \d+ access points$/))return`<span class="scan-summary">${t}</span><br>`;if(t.match(/^\[\d+\]/)){const[e,...s]=t.split(/(?<=^\[\d+\])\s/);return`<span class="ap-index">${e}</span> ${s.join("")}<br>`}if(t.match(/^\s*SSID:/)){const[e,s]=t.split(/:\s*/);return`<span class="ap-label">${e}:</span> <span class="ap-ssid">${s}</span><br>`}if(t.match(/^\s*RSSI:/)){const[e,s]=t.split(/:\s*/);return`<span class="ap-label">${e}:</span> <span class="ap-rssi">${s}</span><br>`}if(t.match(/^\s*Company:/)){const[e,s]=t.split(/:\s*/);return`<span class="ap-label">${e}:</span> <span class="ap-company">${s}</span><br>`}if(t.match(/^[A-Za-z]+$/)&&t.length<20)return`<span class="command-name">${t}</span><br>`;if(t.match(/^Ghost ESP Commands:$/))return`<span class="section-header">${t}</span><br>`;if(t.match(/^\s{4}(Description|Usage|Arguments):(?:\s|$)/))return`<span class="help-section-header">${t}</span><br>`;if(t.match(/^\s{4}Usage:\s/)){const[e,...s]=t.split(/(?<=Usage:)\s/);return`<span class="help-section-header">${e}</span><span class="command-usage">${s.join(" ")}</span><br>`}if(t.match(/^\s{8}(-[a-zA-Z]|\[.*?\])\s+:/)){const[e,...s]=t.split(/(?<=:)\s/);return`<span class="command-flag">${e}</span><span class="flag-description">${s.join(" ")}</span><br>`}return t.match(/^\[.*?\]\s*W\s+\(.*?\)\s*spi_flash:/)?`<span class="warning">${t}</span><br>`:t.match(/^Connected to device$/)||t.match(/^Disconnected from device$/)?`<span class="connection-status">${t}</span><br>`:t.match(/^Port Scanner$/)?`<span class="section-header">${t}</span><br>`:t.match(/^\s*OR\s*$/)?`<span class="separator">${t}</span><br>`:`<span class="regular-text">${t}</span><br>`});n.length&&(this.output.innerHTML?this.output.innerHTML+=n.join(""):this.output.innerHTML=n.join(""),setTimeout(()=>{this.console.scrollTo({top:this.console.scrollHeight,behavior:"smooth"})},0),requestAnimationFrame(()=>{this.console.scrollTo({top:this.console.scrollHeight,behavior:"auto"})}))}navigateHistory(t){this.commandHistory.length&&(-1===this.historyIndex&&(this.currentInput=this.serialInput.value),"up"===t?this.historyIndex<this.commandHistory.length-1&&(this.historyIndex++,this.serialInput.value=this.commandHistory[this.historyIndex]):"down"===t&&this.historyIndex>-1&&(this.historyIndex--,this.serialInput.value=-1===this.historyIndex?this.currentInput:this.commandHistory[this.historyIndex]),setTimeout(()=>{this.serialInput.selectionStart=this.serialInput.value.length,this.serialInput.selectionEnd=this.serialInput.value.length},0))}exportLog(){const t=this.output.innerText||"";if(!t.trim())return;const e=new Blob([t],{type:"text/plain"}),s=URL.createObjectURL(e),n=document.createElement("a");n.href=s,n.download=`serial_log_${Date.now()}.txt`,document.body.appendChild(n),n.click(),setTimeout(()=>{document.body.removeChild(n),URL.revokeObjectURL(s)},0)}}document.addEventListener("DOMContentLoaded",()=>{window.serialConsole=new t})}();
